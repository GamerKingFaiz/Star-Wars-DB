{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Button.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","click","react_default","a","createElement","className","onClick","id","CardList","presentedData","cardClick","map","data","Components_Card","key","url","SearchBox","searchChange","type","placeholder","onChange","Button","buttonClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fetchData","dataArray","fetch","then","response","json","concat","results","setState","retrievedData","next","onButtonClick","nextURL","peopleButtonClick","speciesButtonClick","planetsButtonClick","starshipsButtonClick","vehiclesButtonClick","onCardClick","console","log","onSearchChange","event","searchfield","target","value","state","_this2","filteredData","filter","toLowerCase","includes","length","Components_Button","src_Components_SearchBox","Components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58a03580.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, click }) => {\r\n    return (\r\n        <div className=\"minW bg-SW-yellow tc br3 pa3 ma2 grow bw2 shadow-5\" onClick={ click }>\r\n            <div id=\"info\">\r\n                <h2>{name}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './Card.css';\r\n\r\nconst CardList = ({ presentedData, cardClick }) => {\r\n    return (\r\n        <div id=\"cardHolder\">\r\n            {\r\n                /* Function that maps each robot onto a card */\r\n                presentedData.map((data) => {\r\n                    return (\r\n                        <Card\r\n                            key={data.url} // Key prop is suggested when using an iterator in React\r\n                            name={data.name}\r\n                            click={cardClick}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa3 tc\">\r\n            <input\r\n                type=\"search\"\r\n                placeholder=\"Search names...\"\r\n                className=\"pa3 bn bg-white-80 br-pill tc\"\r\n                id=\"searchBox\"\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Button = ({ buttonClick, name }) => {\r\n    return (\r\n        <button className=\"pa3 ba b--washed-yellow\" onClick={ buttonClick } type=\"button\">{ name }</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Button from '../Components/Button';\nimport './App.css';\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tretrievedData: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tfetchData = (url, dataArray) => {\n\t\tif (url !== null) {\n\t\t\tfetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\tdataArray = dataArray.concat(data.results);\n\t\t\tthis.setState({ retrievedData: dataArray });\n\t\t\turl = data.next;\n\t\t\tthis.fetchData(url, dataArray); // Recursive call\n\t\t\t})\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\t/* fetchdata call for initial load of website */\n\t\tlet nextURL = \"https://swapi.co/api/people/\";\n\t\tlet peopleResults = [];\n\t\tthis.fetchData(nextURL, peopleResults);\n\t}\n\n\t/* Main button click event function */\n\tonButtonClick = (url) => {\n\t\tthis.setState({ retrievedData: [] })\n\t\tlet nextURL = url;\n\t\tlet peopleResults = [];\n\n\t\tthis.fetchData(nextURL, peopleResults);\n\t}\n\t\n\tpeopleButtonClick = () => {\n\t\tthis.onButtonClick(\"https://swapi.co/api/people/\");\n\t}\n\n\tspeciesButtonClick = () => {\n\t\tthis.onButtonClick(\"https://swapi.co/api/species/\");\n\t}\n\n\tplanetsButtonClick = () => {\n\t\tthis.onButtonClick(\"https://swapi.co/api/planets/\");\n\t}\n\n\tstarshipsButtonClick = () => {\n\t\tthis.onButtonClick(\"https://swapi.co/api/starships/\");\n\t}\n\n\tvehiclesButtonClick = () => {\n\t\tthis.onButtonClick(\"https://swapi.co/api/vehicles/\");\n\t}\n\n\tonCardClick = () => {\n\t\tconsole.log('clicked');\n\t}\n\n\t/* function that dynamically updates the searchfield variable with the Searchbox's value */\n\tonSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value });\n    }\n\n\trender() {\n\n\t\tconst filteredData = this.state.retrievedData.filter(data => {\n            return data.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\t\t\n\t\tif (this.state.retrievedData.length === 0) { // Loading displayed when waiting for response\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"tc\">Star Wars Database</h1>\n\t\t\t\t\t<div className=\"pa3 tc\">\n\t\t\t\t\t\t<Button name='People' buttonClick={ this.peopleButtonClick }/>\n\t\t\t\t\t\t<Button name='Species' buttonClick={ this.speciesButtonClick }/>\n\t\t\t\t\t\t<Button name='Planets' buttonClick={ this.planetsButtonClick }/>\n\t\t\t\t\t\t<Button name='Starships' buttonClick={ this.starshipsButtonClick }/>\n\t\t\t\t\t\t<Button name='Vehicles' buttonClick={ this.vehiclesButtonClick }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<SearchBox searchChange={ this.onSearchChange }/>\n\t\t\t\t\t<h1 className=\"tc\">Loading...</h1>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"tc\">Star Wars Database</h1>\n\t\t\t\t\t<div className=\"pa3 tc\">\n\t\t\t\t\t\t<Button name='People' buttonClick={ this.peopleButtonClick }/>\n\t\t\t\t\t\t<Button name='Species' buttonClick={ this.speciesButtonClick }/>\n\t\t\t\t\t\t<Button name='Planets' buttonClick={ this.planetsButtonClick }/>\n\t\t\t\t\t\t<Button name='Starships' buttonClick={ this.starshipsButtonClick }/>\n\t\t\t\t\t\t<Button name='Vehicles' buttonClick={ this.vehiclesButtonClick }/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<SearchBox searchChange={ this.onSearchChange }/>\n\t\t\t\t\t<CardList presentedData={ filteredData } cardClick={ this.onCardClick }/>\n\t\t\t\t</div>\t\n\t\t\t);\n\t\t}\n\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}